@page "/"
@using System.Timers

<PageTitle>Index</PageTitle>

<h1>TDS2490-oblig</h1>
<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>


<div class="container">
    <div class="row">
        @for (var animalnumber=0; animalnumber < shuffledAnimals.Count; animalnumber++)
            {
            var animal = shuffledAnimals[animalnumber];
            var uniquedescriprion = $"Button #{animalnumber}";
            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal,uniquedescriprion))" 
                        type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
            }

    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <button @onclick="@(() => SetUpGame())"type="button" class="btn btn-outline-dark">
        start or restart
    </button>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@code {
    static List<string> VelgEmoji()
    {
        List<string> animalEmoji = new List<string>()
    {
        "🐶", "🐶",
        "🐺", "🐺", 
        "🐮", "🐮", 
        "🦊", "🦊", 
        "🐱", "🐱", 
        "🦁", "🦁", 
        "🐯", "🐯", 
        "🐹", "🐹", 
    };
        List<string> frukt = new List<string>()
        {
            "🍈", "🍈",
            "🍇", "🍇", 
            "🍉", "🍉", 
            "🍊", "🍊", 
            "🍌", "🍌", 
            "🍍", "🍍", 
            "🥝", "🥝", 
            "🍒", "🍒",
        };

        List<string> matt = new List<string>()
        {
          "🧀", "🧀",
          "🍞", "🍞", 
          "🥐", "🥐", 
          "🥯", "🥯", 
          "🥓", "🥓", 
          "🍖", "🍖", 
          "🍔", "🍔", 
          "🌭", "🌭", 
        };

        Random random = new Random();
        List<List<string>> choose = new List<List<string>>()
                {
                    animalEmoji, frukt, matt,
                };
        choose.Add(animalEmoji);
        choose.Add(frukt);
        choose.Add(matt);
        int valgPosisjon = random.Next(0,3);

        List<string> valgt = choose[valgPosisjon];
        return valgt;
    }


    List<string> shuffledAnimals = new List<string>();
    int matchesFound = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;
    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
    }
       List<string> test = VelgEmoji();
    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = VelgEmoji()
        .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
    }
    private void gamestop()
    {
        timer.Stop();
        timeDisplay += " GAME OVER";
        SetUpGame();
    }
    string lastAnimalFound = string.Empty;
    string lastdescription = string.Empty;
    private void ButtonClick(string animal, string animaldescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            lastdescription = animaldescription;
            timer.Start();
        }
        else if ((lastAnimalFound == animal) && (animaldescription != lastdescription))
        {
            lastAnimalFound = string.Empty;

            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += "GAME COMPLETE";
                SetUpGame();
            }
        }
        else
        {
            lastAnimalFound = string.Empty;
        }

    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
             if(tenthsOfSecondsElapsed == 200)
            {
                gamestop();

            }
            

            StateHasChanged();

        });
    }
}